// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace LeaveManagement.Persistence.Migrations
{
    [DbContext(typeof(ReactDbContext))]
    [Migration("20230904083943_addInitialData")]
    partial class addInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("LeaveManagement.Domain.Model.ApiUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FristName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LeaveManagement.Domain.Models.LeaveTypes", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");

                    b.HasData(
                        new
                        {
                            Id = "1FA85F64-5717-4562-B3FC-2C963F66AFA6",
                            DateCreated = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6958),
                            DateModified = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6971),
                            DefaultDays = 18,
                            Name = "Sick Leave"
                        },
                        new
                        {
                            Id = "2FA85F64-5717-4562-B3FC-2C963F66AFA6",
                            DateCreated = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6973),
                            DateModified = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6974),
                            DefaultDays = 0,
                            Name = "Annual Block Leave"
                        },
                        new
                        {
                            Id = "3FA85F64-5717-4562-B3FC-2C963F66AFA6",
                            DateCreated = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6975),
                            DateModified = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6975),
                            DefaultDays = 0,
                            Name = "Compassionate Leave"
                        },
                        new
                        {
                            Id = "4FA85F64-5717-4562-B3FC-2C963F66AFA6",
                            DateCreated = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6977),
                            DateModified = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6977),
                            DefaultDays = 0,
                            Name = "Compensatory Leave"
                        },
                        new
                        {
                            Id = "5FA85F64-5717-4562-B3FC-2C963F66AFA6",
                            DateCreated = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6979),
                            DateModified = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6979),
                            DefaultDays = 7,
                            Name = "Marriage Leave"
                        },
                        new
                        {
                            Id = "6FA85F64-5717-4562-B3FC-2C963F66AFA6",
                            DateCreated = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6980),
                            DateModified = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6981),
                            DefaultDays = 0,
                            Name = "On-Duty Leave"
                        },
                        new
                        {
                            Id = "7FA85F64-5717-4562-B3FC-2C963F66AFA6",
                            DateCreated = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6982),
                            DateModified = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6982),
                            DefaultDays = 0,
                            Name = "Sat-off"
                        },
                        new
                        {
                            Id = "8FA85F64-5717-4562-B3FC-2C963F66AFA6",
                            DateCreated = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6983),
                            DateModified = new DateTime(2023, 9, 4, 15, 39, 43, 646, DateTimeKind.Local).AddTicks(6983),
                            DefaultDays = 0,
                            Name = "Uppaid Leave"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c11260e2-5f0b-4695-ba37-d2f138dc2a27",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "1361827d-6d11-4ddc-9013-4d0ecd7ab8bc",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LeaveManagement.Domain.Model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LeaveManagement.Domain.Model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeaveManagement.Domain.Model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LeaveManagement.Domain.Model.ApiUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
