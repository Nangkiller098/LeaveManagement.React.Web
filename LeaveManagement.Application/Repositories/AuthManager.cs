

using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using AutoMapper;
using LeaveManagement.Application.Contracts;
using LeaveManagement.Domain.Dto.Users;
using LeaveManagement.Domain.Model;
using LeaveManagement.Domain.Model.Users;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;


namespace LeaveManagement.Application.Repositories
{
    public class AuthManager : IAuthManager
    {
        private readonly IMapper _mapper;
        private readonly UserManager<ApiUser> _userManager;
        private readonly IConfiguration _configuration;
        private ApiUser _user;
        private const string _loginProvider ="LeaveManagementReact";
        private const string _refreshToken="RefreshToken";
        private readonly ILogger _logger;
        public AuthManager(IMapper mapper,UserManager<ApiUser> userManager,IConfiguration configuration,ILogger<AuthManager> logger )
        {
            _logger = logger;
            _configuration = configuration;
            _userManager = userManager;
            _mapper = mapper;
            
        }



        public async Task<AuthResponseDto> Login(LoginDto loginDto)
        {
                _logger.LogInformation($"Looking for user with email {loginDto.Email}");
                _user = await _userManager.FindByEmailAsync(loginDto.Email);
                bool isValidUser= await _userManager.CheckPasswordAsync(_user,loginDto.Password);
                if(_user == null || isValidUser==false)
                {
                    _logger.LogWarning($"User with email {loginDto.Email} is not valid.");
                    return null;
                }
                var token = await GenerateToken();
                _logger.LogInformation($"token has been generated by : {loginDto.Email} | Token : {token}");
                return new AuthResponseDto
                {
                    Token=token,
                    UserId=_user.Id,
                    RefreshToken= await CreateRefreshToken()
                };
        }
        public async Task<IEnumerable<IdentityError>> Registers(ApiUserDto userDto)
        {

                var user = _mapper.Map<ApiUser>(userDto);
                user.UserName=userDto.Email;
                var result = await _userManager.CreateAsync(user,userDto.Password);
                if(result.Succeeded){
                    await _userManager.AddToRoleAsync(user,"User");
                    _logger.LogInformation($"{user.UserName} has been Registered sucessfully");
                }
                _logger.LogWarning($"Register Warning : {result.Errors}");
                return result.Errors;
        }



        private async Task<string>GenerateToken()
        {
                var securitykey= new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JwtSettings:Key"])); //get key jwt
                var credentails= new SigningCredentials(securitykey,SecurityAlgorithms.HmacSha256); //check credentials
                var roles = await _userManager.GetRolesAsync(_user);
                var roleClaims = roles.Select(x=> new Claim(ClaimTypes.Role,x)).ToList();
                var userClaims = await _userManager.GetClaimsAsync(_user);
                var claims = new List<Claim>
            {
                new(JwtRegisteredClaimNames.Sub,_user.Email), //person who hold the key
                new(JwtRegisteredClaimNames.Jti,Guid.NewGuid().ToString()), //prevent playback operations or playback attack
                new(JwtRegisteredClaimNames.Email,_user.Email), //prevent playback operations or playback attack
                new("uid",_user.Id), //prevent playback operations or playback attack

            }.Union(userClaims).Union(roleClaims);;
            var token = new JwtSecurityToken(
                issuer:_configuration["JwtSettings:Issuer"],
                audience:_configuration["JwtSettings:Audience"],
                claims:claims,
                expires:DateTime.Now.AddMinutes(Convert.ToInt32(_configuration["JwtSettings:DurationsInMinutes"])),
                signingCredentials:credentails
            );
            return new JwtSecurityTokenHandler().WriteToken(token);
        }
        public async Task<string> CreateRefreshToken()
        {
                await _userManager.RemoveAuthenticationTokenAsync(_user,_loginProvider,_refreshToken);
                var newRefreshToken= await _userManager.GenerateUserTokenAsync(_user,_loginProvider,_refreshToken);
                var result = await _userManager.SetAuthenticationTokenAsync(_user,_loginProvider,_refreshToken,newRefreshToken);
                return newRefreshToken;
         }
        public async Task<AuthResponseDto> VerifyRefreshToken(AuthResponseDto request)
        {
             var jwtSecurityTokenHandler = new JwtSecurityTokenHandler();
            var tokenContent = jwtSecurityTokenHandler.ReadJwtToken(request.Token);
            var username = tokenContent.Claims.ToList().FirstOrDefault(q=>q.Type==JwtRegisteredClaimNames.Email)?.Value;
            _user = await _userManager.FindByNameAsync(username);
            if(_user == null || _user.Id !=request.UserId)
            {
                _logger.LogWarning($"the request: {request.UserId} not found");
                return null;
            }
            var isValidRefreshToken = await _userManager.VerifyUserTokenAsync(_user,_loginProvider,_refreshToken,request.RefreshToken);
            if(isValidRefreshToken)
            {
                var token=await GenerateToken();
               return new AuthResponseDto
               {
                Token=token,
                UserId=_user.Id,
                RefreshToken = await CreateRefreshToken()
               };
            }
            await _userManager.UpdateSecurityStampAsync(_user);
            _logger.LogInformation($"Token has been Generated sucessfully from : {_user.Email}");
            return null;

        }
    }
}